package game

// 移动具有格子属性, 不按照像素点移动, 更好把握同步运算
// 浮岛上可以再加上浮岛, 比如玩家的交通工具(暂时不支持)
// 角色的位置, 从浮岛到场景, 从场景到浮岛

// 对象基本属性
// ID, 名称, 位置, 血量, 体力, 速度, 惯性(固定规则), 攻击力, 防御力,

// 速度
// 帧/每块, 精确每帧的位置
// 除了浮岛块的坐标, 还有一层角色坐标么?
// 角色比浮岛块要小么? 小多少? 1:3?
//

// 房间 : 含有一个场景, 玩法系统接口, 玩法用到的数据缓冲
// 场景 : 具有独立性, 没有复杂逻辑问题, 只提供基本的跑图和技能操作, 出现的各种事件都调用 "房间" 接口, 由他来处理
//        同一个场景就可以挂在不同房间,进行不同逻辑的比赛,这个可以认为是给玩家开放玩法自定义的接口
// 动态场景 : 由房间依据自己的逻辑动态创建

// 网络 : 文件传输协议, 持续的传输一个文件, 非连续? 连续
//        动态文件名, 版本号, 时间戳, 用途, 长度, 当前长度, 当前分块编号, 完全接受完毕, 自动组装动态文件

//
// 从 Room 获取当前帧编号
// 计算当前帧
// 移动完毕
// BeginFrame
// EndFrame
// Room.FrameSn
//
// 每帧到底走多远?
//
// 每次速度的改变都是一个新的移动

// 每帧走多少?

// 是否到达 Dst 目标

// 惯性的使用, 距离目标点一定帧数(时间), 如果在惯性范围内, 直接到达目标点, 如果在惯性范围外, 按照惯性行进一点距离, 之后按照新方向前进(反向)

// 只有两种方向, 左, 右

// 上是跳(继续行走), 但是有高度值
// 下是蹲(停止行走)

// 额外状态
// 1. 跳
// 2. 跑
// 3. 走
// 4. 瞬移
// 5. 下蹲
// 6. 飞踢
// 7. 防御
// 8. 硬直
// 9. 趴下
//10. 晕(站立,趴下...) 附带效果
//11.
